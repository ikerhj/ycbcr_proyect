/*********************************************************************************
 *
 * si5338_regs_p.h
 *
 *  Created on: 12.03.2021
 *      Author: Peter Bartmann
 *
 * File created with the help of ClockBuilder Pro v2.30 [2021-02-29]
 *
 ********************************************************************************/

#include "app_cfg.h"
#include "si5338.h"
#include "i2c.h"


#ifndef SI5338_REGS_P_
#define SI5338_REGS_P_


#define LENGTH_INIT_SEQUENCE_SI5338      12
#define NUM_INIT_REGS_SI5338            237
#define LENGTH_CONFIG_SEQUENCE_SI5338     2
#define NUM_CFG_MODE_REGS_SI5338          9


#define SI5338_ID_REG               0
#define PLL_LOSSLOCK_REG          218
  #define PLL_LOSSLOCK_BIT          4
  #define CLKIN_LOSS_BIT            2
#define OEB_REG                   230
  #define OEB_REG_VAL_OFF           0x1F
  #define OEB_REG_VAL_ALL_ON        0x00 // OEB register; just use all clock outs
  #define OEB_REG_VAL_CLK2_ON       0x0B // OEB register; just use CLK2 (general configuration)
  #define OEB_REG_VAL_CLK2_CLK3_ON  0x03 // OEB register; just use CLK2 and CLK3
#define DIS_LOL_REG               241
  #define DIS_LOL_REG_VAL           ((1 << 7) | 0xB5)
#define SOFT_RST_REG              246
  #define SOFT_RST_BIT              1


typedef struct mode_regs_data_t {
   unsigned char reg_addr;
   unsigned char reg_val[NUM_SUPPORTED_CONFIGS_SI5338];
//   unsigned char reg_mask;  // reg_mask is always 0xFF here -> so remove it
} mode_regs_data_t;

typedef struct init_regs_data_t {
  unsigned char reg_val[NUM_INIT_REGS_SI5338];
  unsigned char reg_mask[NUM_INIT_REGS_SI5338];
} init_regs_data_t;

typedef struct config_regs_data_t {
  unsigned char reg_val[NUM_CFG_MODE_REGS_SI5338];
//  unsigned char reg_mask[NUM_CFG_MODE_REGS_SI5338];// reg_mask is always 0xFF here -> so remove it
} config_regs_data_t;

consec_regs8b_t const init_reg_sequence[LENGTH_INIT_SEQUENCE_SI5338] = {
  {  6,  1},  //   6
  { 27, 16},  //  27 -  42
  { 45, 51},  //  45 -  95
  { 97, 48},  //  97 - 144
  {152, 66},  // 152 - 217
  {242,  1},  // 242
  {255,  1},  // 255 (set page bit to 1)
  { 31, 13},  //  31 -  43
  { 47, 13},  //  47 -  59
  { 63, 13},  //  63 -  75
  { 79, 13},  //  79 -  91
  {255,  1}   // 255 (set page bit to 0)
};

init_regs_data_t const init_regs = {
  {
    //   6
    0x08,
    //  27 -  42
    0x70,0x16,0x90,0xB0,0xC0,0xC0,0xC0,0xC0,0x55,0x06,0x06,0x06,0x06,0x84,0x10,0x24,
    //  45 -  95
    0x00,0x00,0x14,0x3A,0x00,0xC4,0x07,0x10,0x00,0x06,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x10,0xFB,0x07,0xC4,0x01,0x00,0x00,0x7D,0x00,0x00,0x00,0x10,
    0xFB,0x07,0xC4,0x01,0x00,0x00,0x7D,0x00,0x00,0x00,0x10,0xF5,0x16,0x4C,0x00,0x00,0x00,0x19,0x00,0x00,0x00,
    //  97 - 144
    0xEB,0x2F,0x34,0x00,0x00,0x00,0x19,0x00,0x00,0x80,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x40,0x00,0x80,0x00,0x40,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    // 152 - 217
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,
    // 242
    0x02,
    // 255
    0x01, // set page bit to 1
    //  31 -  43
    0x00,0x00,0x01,0x00,0x00,0x90,0x31,0x00,0x00,0x01,0x00,0x00,0x00,
    //  47 -  59
    0x00,0x00,0x01,0x00,0x00,0x90,0x31,0x00,0x00,0x01,0x00,0x00,0x00,
    //  63 -  75
    0x00,0x00,0x01,0x00,0x00,0x90,0x31,0x00,0x00,0x01,0x00,0x00,0x00,
    //  79 -  91
    0x00,0x00,0x00,0x00,0x00,0x90,0x31,0x00,0x00,0x01,0x00,0x00,0x00,
    // 255
    0x00 // set page bit to 0
  } , {
    //   6
    0x1D,
    //  27 -  42
    0x80,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x1F,0x1F,0x1F,0x1F,0xFF,0x7F,0x3F,
    //  45 -  95
    0xFF,0xFF,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x3F,0xFF,
    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x3F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x3F,
    //  97 - 144
    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xBF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
    0xFF,0xFF,0x0F,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
    // 152 - 217
    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x0F,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x0F,
    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x0F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
    // 242
    0x02,
    // 255
    0xFF,
    //  31 -  43
    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x0F,
    //  47 -  59
    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x0F,
    //  63 -  75
    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x0F,
    //  79 -  91
    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x0F,
    // 255
    0xFF
  }
};


consec_regs8b_t const config_reg_sequence[LENGTH_CONFIG_SEQUENCE_SI5338] = {
  { 75,  4},  //  75 -  78
  { 81,  1}   //  81
};

config_regs_data_t const config_regs[NUM_SUPPORTED_CONFIGS_SI5338] = {
  //  75,  76,  77,  78,  81    // regs
  {{0x67,0x06,0xAC,0x00,0x63}}, // FREE_1080p_16t9
  {{0x67,0x06,0xAC,0x00,0x63}}, // FREE_1200p_4t3
  {{0x67,0x06,0xAC,0x00,0x63}}, // FREE_1440p_4t3
  {{0x67,0x06,0xAC,0x00,0x63}}  // FREE_1440p_16t9
  //  75,  76,  77,  78,  81    // regs
};


#endif /* SI5338_REGS_P_ */
